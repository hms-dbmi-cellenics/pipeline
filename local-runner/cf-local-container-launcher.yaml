AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation for local testing of pipelines.
Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
  LocalContainerLauncher:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "local-container-launcher"
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import subprocess
          import random
          import string

          def random_string(length):
            return ''.join(random.choice(string.ascii_letters) for m in range(length))

          def handler(event, context):

            docker_command = ' '.join([
              "docker run --rm -t",
              f"--name {event['name']}-{random_string(10)}",
              f"{'-d' if event['detached'] else ''}",
              f"--env ACTIVITY_ARN={event.get('activityArn', '')}",
              f"--env AWS_DEFAULT_REGION=__AWS_DEFAULT_REGION__",
              f"--env HOST_IP=__HOST_IP__",
              f"--env DEBUG_STEP=__DEBUG_STEP__",
              f"--env DEBUG_PATH=__DEBUG_PATH__",
              f"--env AWS_DEFAULT_REGION=__AWS_DEFAULT_REGION__",
              f"-v __DEBUG_PATH__:/debug",
              event['image']
            ])
            subprocess.run(f"echo {docker_command}", shell=True, check=True)
            proc = subprocess.run(docker_command, shell=True, check=True)

            return proc.returncode
      Runtime: "python3.8"
      Timeout: 25
  QualityControlActivity:
    Type: AWS::StepFunctions::Activity
    Properties:
      Name: biomage-qc-activity-development
  RemovePreviousPipelineContainers:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "remove-previous-pipeline-containers"
      Handler: "index.handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import subprocess

          # Removes all containers that already exist and contain either 'qc' or 'gem2s' or 'seurat' in their name.
          def handler(event, context):
            proc = subprocess.run("docker kill $(docker ps -f name='qc|gem2s|seurat' --format '{{.Names}}') || true", shell=True, check=True)

            return proc.returncode
      Runtime: "python3.8"
      Timeout: 25
