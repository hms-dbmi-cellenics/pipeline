name: CI
on:
  push:
    branches:
      - master
  release:
    types:
      - released
  pull_request:
    branches:
      - master

jobs:
  uncheck-integration-test:
    name: Mark integration test as not run
    runs-on: ubuntu-20.04
    if: github.event_name == 'pull_request'
    steps:
      - id: get-pr-body
        name: Get the current PR body
        uses: jwalton/gh-find-current-pr@v1
        with:
          state: open

      - id: create-unchecked-pr-body
        name: Create unchecked PR body
        run: |-
          UNCHECKED_BODY=$(sed 's/- \[[Xx]\] Started end-to-end tests on the latest commit./- \[ \] Started end-to-end tests on the latest commit./' <<\EOF
          ${{ steps.get-pr-body.outputs.body }}
          EOF
          )

          UNCHECKED_BODY="${UNCHECKED_BODY//'%'/'%25'}"
          UNCHECKED_BODY="${UNCHECKED_BODY//$'\n'/'%0A'}"
          UNCHECKED_BODY="${UNCHECKED_BODY//$'\r'/'%0D'}"

          echo "Unchecked PR body"
          echo $UNCHECKED_BODY

          echo "::set-output name=body::$UNCHECKED_BODY"

      - id: uncheck-integration-checkbox
        name: Uncheck the integration checkbox
        uses: tzkhan/pr-update-action@v2
        with:
          repo-token: "${{ secrets.API_TOKEN_GITHUB }}"
          head-branch-regex: "${{ github.head_ref }}"
          lowercase-branch: false
          body-template: "${{  steps.create-unchecked-pr-body.outputs.body }}"
          body-update-action: "replace"

  build-docker:
    name: Build Docker container
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        project: ['pipeline-runner']
    outputs:
      repo-name: ${{ steps.ref.outputs.repo-name }}
      tag: ${{ steps.ref.outputs.tag }}
    defaults:
      run:
        working-directory: ${{ matrix.project }}
    steps:
      - id: checkout
        name: Check out source code
        uses: actions/checkout@v2

      - id: ref
        name: Format docker tag and repository name for current image.
        run: |-
          # This will take a ref like `refs/heads/master`
          # and turn it into `refs-heads-master`
          REF_ID=$(echo $GITHUB_REF | sed 's/\//-/g')

          echo THIS BUILD HOTFIX/RELEASE IS RUNNING!! WOOT!

          # the final tag is something like:
          # refs-heads-master-a4f8bc313dae
          # this is what we push to ECR
          # we will also take semver'd tags like `1.0.0` and use them for releases

          if [ "${{ github.event_name }}" = "release" ] && [ "${{ github.event.action }}" = "released" ]; then
            echo "::set-output name=tag::$REF_ID"
          else
            echo "::set-output name=tag::$REF_ID-$GITHUB_SHA"
          fi

          # This will take a GitHub repo name like `hms-dbmi-cellenics/iac`
          # and turns it into `iac`. This will be the name of the
          # ECR repository.
          IMAGE_REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F '/' '{print $2}')
          echo "::set-output name=repo-name::$IMAGE_REPO_NAME"

      - id: ref-previous
        name: Format docker tag and repository name for the previous pushed image.
        run: |-
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "This is a pull request, base ref and sha set to the target branch."
            BASE_REF="refs-heads-${{ github.event.pull_request.base.ref }}"
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            echo "::set-output name=tag::$BASE_REF-$BASE_SHA"
          fi

          if [ "${{ github.event_name }}" = "push" ]; then
            echo "This is a push, base ref and sha set to the previous commit."
            BASE_REF=$(echo $GITHUB_REF | sed 's/\//-/g')
            BASE_SHA="${{ github.event.before }}"
            echo "::set-output name=tag::$BASE_REF-$BASE_SHA"
          fi

          if [ "${{ github.event_name }}" = "release" ]; then
            echo "This is a release, base ref and sha set to the current commit."
            BASE_SHA="$GITHUB_SHA"
            echo "::set-output name=tag::refs-heads-master-$BASE_SHA"
          fi

      - id: set-up-creds
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - id: login-ecr
        name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - id: create-ecr-registry
        name: Create an ECR repository (if needed)
        # This will fail if the registry already exists, which is fine. If there is some other
        # error, the `push` step will fail instead.
        continue-on-error: true
        run: |-
          aws ecr create-repository --repository-name $REPO_NAME
        env:
          REPO_NAME: ${{ steps.ref.outputs.repo-name }}

      - id: pull-latest-image
        name: Pull latest Docker images from mainline
        run: |-
          echo Pulling $IMAGE_NAME from ECR.
          docker pull $IMAGE_NAME || true

          echo Pulling $IMAGE_NAME-builder from ECR.
          docker pull $IMAGE_NAME-builder || true
        env:
          IMAGE_NAME: ${{ format('{0}/{1}:{2}-{3}', steps.login-ecr.outputs.registry, steps.ref.outputs.repo-name, steps.ref-previous.outputs.tag, matrix.project) }}

      - id: build
        name: Build Docker images
        run: |-
          docker build --target builder \
            --cache-from=$PREVIOUS_IMAGE_NAME-builder \
            --build-arg GITHUB_PAT=$GITHUB_PAT \
            --tag $IMAGE_NAME-builder .

          docker build --target prod \
            --cache-from=$IMAGE_NAME-builder \
            --cache-from=$PREVIOUS_IMAGE_NAME \
            --build-arg GITHUB_PAT=$GITHUB_PAT \
            --tag $IMAGE_NAME .
        env:
          PREVIOUS_IMAGE_NAME: ${{ format('{0}/{1}:{2}-{3}', steps.login-ecr.outputs.registry, steps.ref.outputs.repo-name, steps.ref-previous.outputs.tag, matrix.project) }}
          IMAGE_NAME: ${{ format('{0}/{1}:{2}-{3}', steps.login-ecr.outputs.registry, steps.ref.outputs.repo-name, steps.ref.outputs.tag, matrix.project) }}
          GITHUB_PAT: ${{ secrets.API_TOKEN_GITHUB }}

      # - id: codecov
      #   name: Generate codecov report
      #   run: |-
      #     docker run \
      #       --entrypoint /bin/bash \
      #       -v $(pwd):/app $IMAGE_NAME \
      #       -c "R -e 'cov <- covr::package_coverage(\"/app\"); covr::to_cobertura(cov, \"/app/coverage.xml\")'"
      #   env:
      #     IMAGE_NAME: ${{ format('{0}/{1}:{2}-{3}', steps.login-ecr.outputs.registry, steps.ref.outputs.repo-name, steps.ref.outputs.tag, matrix.project) }}

      # - id: upload-coverage
      #   name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v2
      #   with:
      #     files: ./pipeline-runner/coverage.xml

      - id: push
        name: Push docker images to ECR
        run: |-
          echo Pushing image $IMAGE_NAME-builder to ECR.
          docker push $IMAGE_NAME-builder

          echo Pushing image $IMAGE_NAME to ECR.
          docker push $IMAGE_NAME
        env:
          IMAGE_NAME: ${{ format('{0}/{1}:{2}-{3}', steps.login-ecr.outputs.registry, steps.ref.outputs.repo-name, steps.ref.outputs.tag, matrix.project) }}

      - id: send-to-slack
        name: Send failure notification to Slack
        if: failure() && github.event_name == 'push'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.BUILD_STATUS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: pipelines
          status: FAILED
          color: danger

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-20.04
    needs: build-docker
    strategy:
      max-parallel: 1
      matrix:
        environment: ['production', 'staging', 'develop']
    steps:
      - id: checkout
        name: Check out source code
        uses: actions/checkout@v2

      - id: setup-aws
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - id: login-ecr
        name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - id: install-yq
        name: Install yq for modifying the deployment spec.
        run: |-
          sudo wget https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -O /usr/local/bin/yq && sudo chmod +x /usr/local/bin/yq

      - id: fill-metadata
        name: Fill out a new HelmRelease resource
        run: |-
          REF_DASHED=$(echo $GITHUB_REF | sed 's/\//-/g')
          DEPLOYMENT_NAME=$(echo $GITHUB_REPOSITORY | awk -F '/' '{print $2}')
          echo "::set-output name=deployment-name::$DEPLOYMENT_NAME"
          echo "::set-output name=ref-dashed::$REF_DASHED"

          if [ "${{ matrix.environment }}" = "production" ]; then
            SANDBOX_ID="default"
            CHART_REF="$GITHUB_SHA"
            KUBERNETES_ENV="production"
            REPLICA_COUNT="3"
            SHORT_TAG_REF=${REF_DASHED/refs-tags-/}
            IMAGE_GLOB="${IMAGE_TAG/$SHORT_TAG_REF/*}"
            MEMORY_REQUEST="29Gi"
          fi

          if [ "${{ matrix.environment }}" = "develop" ]; then
            SANDBOX_ID="default"
            CHART_REF="$GITHUB_SHA"
            KUBERNETES_ENV="staging"
            REPLICA_COUNT="1"
            IMAGE_GLOB="${IMAGE_TAG/$GITHUB_SHA/*}"
            MEMORY_REQUEST="29Gi"
          fi

          if [ "${{ matrix.environment }}" = "staging" ]; then
            SANDBOX_ID="STAGING_SANDBOX_ID"
            CHART_REF="STAGING_CHART_REF"
            KUBERNETES_ENV="staging"
            REPLICA_COUNT="0"
            IMAGE_GLOB="${IMAGE_TAG/$GITHUB_SHA/*}"
            MEMORY_REQUEST="4Gi"
          fi

          echo "::set-output name=sandbox-id::$SANDBOX_ID"
          echo "::set-output name=kubernetes-env::$KUBERNETES_ENV"

          yq w -d1 .flux.yaml metadata.namespace "$DEPLOYMENT_NAME-$SANDBOX_ID" \
          | yq w -d0 - metadata.name "$DEPLOYMENT_NAME-$SANDBOX_ID" \
          | yq w -d1 - metadata.name "$DEPLOYMENT_NAME" \
          | yq w -d0 - metadata.labels.sandboxId "$SANDBOX_ID" \
          | yq w -d1 - metadata.labels.sandboxId "$SANDBOX_ID" \
          | yq w -d1 - spec.chart.ref "$CHART_REF" \
          | yq w -d1 - spec.releaseName "$DEPLOYMENT_NAME" \
          | yq w -d1 - spec.values.clusterEnv "$KUBERNETES_ENV" \
          | yq w -d1 - spec.values.pipelineRunner.image "$IMAGE_NAME-pipeline-runner" \
          | yq w -d1 - spec.values.sandboxId "$SANDBOX_ID" \
          | yq w -d1 - spec.values.memoryRequest "$MEMORY_REQUEST" \
          | yq w -d1 - spec.values.replicaCount $REPLICA_COUNT \
          | yq w -d1 - spec.values.serviceAccount.iamRole "pipeline-role-$KUBERNETES_ENV" \
          | yq w -d1 - "metadata.annotations[filter.fluxcd.io/pipelineRunner]" "glob:$IMAGE_GLOB-pipeline-runner" \
          > $DEPLOYMENT_NAME.yaml

          cat $DEPLOYMENT_NAME.yaml
        env:
          IMAGE_NAME: ${{ format('{0}/{1}:{2}', steps.login-ecr.outputs.registry, needs.build-docker.outputs.repo-name, needs.build-docker.outputs.tag) }}
          IMAGE_TAG: ${{ needs.build-docker.outputs.tag }}

      - id: disable-admin-enforcement
        name: Temporarily disable admin enforcement
        uses: benjefferies/branch-protection-bot@1.0.7
        with:
          access_token: ${{ secrets.API_TOKEN_GITHUB }}
          owner: ${{ github.repository_owner }}
          repo: iac
          enforce_admins: false
          retries: 8

      - name: Push production/develop release to iac for deployment
        if:
          (matrix.environment == 'production' && github.event_name == 'release' && github.event.action == 'released') || (matrix.environment == 'develop' && github.event_name == 'push')
        uses: dmnemec/copy_file_to_another_repo_action@v1.0.4
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: '${{ steps.fill-metadata.outputs.deployment-name }}.yaml'
          destination_repo: '${{ github.repository_owner }}/iac'
          destination_folder: 'releases/${{ steps.fill-metadata.outputs.kubernetes-env }}'
          user_email: 'ci@biomage.net'
          user_name: 'Biomage CI/CD'

      - name: Push production/develop template to releases
        if:
          (matrix.environment == 'production' && github.event_name == 'release' && github.event.action == 'released') || (matrix.environment == 'develop' && github.event_name == 'push')
        uses: dmnemec/copy_file_to_another_repo_action@v1.0.4
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: '${{ steps.fill-metadata.outputs.deployment-name }}.yaml'
          destination_repo: '${{ github.repository_owner }}/releases'
          destination_folder: '${{ steps.fill-metadata.outputs.kubernetes-env }}'
          user_email: 'ci@biomage.net'
          user_name: 'Biomage CI/CD'

      - name: Change name of deployment file for staging deployment
        if:
          (github.event_name == 'pull_request' || github.event_name == 'push') && matrix.environment == 'staging'
        env:
          DEPLOYMENT_NAME: ${{ steps.fill-metadata.outputs.deployment-name }}
          REF_DASHED: ${{ steps.fill-metadata.outputs.ref-dashed }}
        run: |-
          mv $DEPLOYMENT_NAME.yaml $REF_DASHED.yaml

      - name: Push staging deployment template to iac
        if:
          (github.event_name == 'pull_request' || github.event_name == 'push') && matrix.environment == 'staging'
        uses: dmnemec/copy_file_to_another_repo_action@v1.0.4
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: '${{ steps.fill-metadata.outputs.ref-dashed }}.yaml'
          destination_repo: '${{ github.repository_owner }}/iac'
          destination_folder: 'releases/staging-candidates/${{ steps.fill-metadata.outputs.deployment-name }}'
          user_email: 'ci@biomage.net'
          user_name: 'Biomage CI/CD'

      - name: Push staging deployment template to releases
        if:
          (github.event_name == 'pull_request' || github.event_name == 'push') && matrix.environment == 'staging'
        uses: dmnemec/copy_file_to_another_repo_action@v1.0.4
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: '${{ steps.fill-metadata.outputs.ref-dashed }}.yaml'
          destination_repo: '${{ github.repository_owner }}/releases'
          destination_folder: 'staging-candidates/${{ steps.fill-metadata.outputs.deployment-name }}'
          user_email: 'ci@biomage.net'
          user_name: 'Biomage CI/CD'

      - id: enable-admin-enforcement
        name: Re-enable admin enforcement
        uses: benjefferies/branch-protection-bot@1.0.7
        if: always()
        with:
          access_token: ${{ secrets.API_TOKEN_GITHUB }}
          owner: ${{ github.repository_owner }}
          repo: iac
          enforce_admins: true
          retries: 8

      - id: send-to-slack
        name: Send failure notification to Slack
        if: failure() && github.event_name == 'push'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.BUILD_STATUS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: pipelines
          status: FAILED
          color: danger

  ready-to-merge:
    name: Ready for merging
    runs-on: ubuntu-20.04
    needs: deploy
    steps:
      - id: ready-to-merge
        name: Signal readiness to merge
        run: |-
          exit 0
